package com.Iviinvest.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;

/**
 * Entidade que representa um usuário no sistema.
 * <p>
 * Mapeia a tabela 'usuarios' no banco de dados e contém informações
 * de autenticação e perfil do usuário.
 * <p>
 * Entity representing a user in the system.
 * Maps to the 'usuarios' table in the database and contains
 * user authentication and profile information.
 */
@Entity
@Table(name = "usuarios")
public class Usuario {

    /**
     * Identificador único do usuário.
     * <p>
     * Gerado automaticamente pelo banco de dados com auto-incremento.
     * <p>
     * Unique user identifier.
     * Automatically generated by the database with auto-increment.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Endereço de e-mail do usuário.
     * <p>
     * Deve ser único no sistema e válido, não podendo ser vazio.
     * <p>
     * User's email address.
     * Must be unique in the system and valid, cannot be empty.
     */
    @Email(message = "Deve ser um endereço de e-mail válido | Must be a valid email address")
    @NotBlank(message = "O e-mail não pode estar vazio | Email cannot be blank")
    @Column(unique = true)
    private String email;

    /**
     * Hash da senha do usuário.
     * <p>
     * Armazena a senha criptografada, não podendo ser vazia.
     * <p>
     * User's password hash.
     * Stores the encrypted password, cannot be empty.
     */
    @NotBlank(message = "A senha não pode estar vazia | Password cannot be blank")
    @Column(nullable = false)
    private String senhaHash;

    /**
     * Token para redefinição de senha.
     * <p>
     * Gerado temporariamente para processos de recuperação de senha.
     * <p>
     * Password reset token.
     * Temporarily generated for password recovery processes.
     */
    private String tokenReset;

    /**
     * Perfil de investidor do usuário.
     * <p>
     * Define a tolerância a risco (ex: Conservador, Moderado, Agressivo).
     * Campo opcional.
     * <p>
     * User's investor profile.
     * Defines risk tolerance (e.g., Conservative, Moderate, Aggressive).
     * Optional field.
     */
    @Column(name = "perfil_investidor", nullable = true)
    private String perfilInvestidor;

    // ============== GETTERS E SETTERS ==============
    // ============== GETTERS AND SETTERS ==============

    /**
     * Obtém o ID do usuário.
     * @return ID do usuário
     * Gets the user ID.
     * @return User ID
     */
    public Long getId() {
        return id;
    }

    /**
     * Define o ID do usuário.
     * @param id ID do usuário
     * Sets the user ID.
     * @param id User ID
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Obtém o e-mail do usuário.
     * @return Endereço de e-mail
     * Gets the user's email.
     * @return Email address
     */
    public String getEmail() {
        return email;
    }

    /**
     * Define o e-mail do usuário.
     * @param email Endereço de e-mail válido
     * Sets the user's email.
     * @param email Valid email address
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Obtém o hash da senha.
     * @return Hash da senha criptografada
     * Gets the password hash.
     * @return Encrypted password hash
     */
    public String getSenhaHash() {
        return senhaHash;
    }

    /**
     * Define o hash da senha.
     * @param senhaHash Hash da senha criptografada
     * Sets the password hash.
     * @param senhaHash Encrypted password hash
     */
    public void setSenhaHash(String senhaHash) {
        this.senhaHash = senhaHash;
    }

    /**
     * Obtém o token de redefinição de senha.
     * @return Token de redefinição
     * Gets the password reset token.
     * @return Reset token
     */
    public String getTokenReset() {
        return tokenReset;
    }

    /**
     * Define o token de redefinição de senha.
     * @param tokenReset Token de redefinição
     * Sets the password reset token.
     * @param tokenReset Reset token
     */
    public void setTokenReset(String tokenReset) {
        this.tokenReset = tokenReset;
    }

    /**
     * Obtém o perfil de investidor.
     * @return Perfil de investidor
     * Gets the investor profile.
     * @return Investor profile
     */
    public String getPerfilInvestidor() {
        return perfilInvestidor;
    }

    /**
     * Define o perfil de investidor.
     * @param perfilInvestidor Perfil de investidor
     * Sets the investor profile.
     * @param perfilInvestidor Investor profile
     */
    public void setPerfilInvestidor(String perfilInvestidor) {
        this.perfilInvestidor = perfilInvestidor;
    }
}